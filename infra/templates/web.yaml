AWSTemplateFormatVersion: 2010-09-09

Parameters:
  ProjectName:
    Type: String
  Environment:
    Type: String
  EnvironmentFullName:
    Type: String

  VpcId:
    Type: String
  PrivateSubnets:
    Type: String
  PublicSubnets:
    Type: String
  ECSClusterArn:
    Type: String
  ECSExecutionRoleArn:
    Type: String
  EC2CapacityProviderName:
    Type: String
  ECRRepoUrl:
    Type: String
  SecretArn:
    Type: String
  RDSInstanceEndpoint:
    Type: String

Resources:
  WebTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${ProjectName}-web-${Environment}
      ExecutionRoleArn: !Ref ECSExecutionRoleArn
      TaskRoleArn: !Ref WebServiceRole
      RequiresCompatibilities:
        - EC2
      NetworkMode: awsvpc
      Memory: 3072
      Cpu: 2048
      ContainerDefinitions:
        - Name: !Sub ${ProjectName}-web-${Environment}
          Image: !Sub '${ECRRepoUrl}:samaritan-latest'
          Essential: true
          PortMappings:
            - Protocol: tcp
              ContainerPort: 80
          Environment:
            - Name: ENVIRONMENT
              Value: !Ref Environment
            - Name: RAILS_ENV
              Value: !Ref EnvironmentFullName
            - Name: RACK_ENV
              Value: !Ref EnvironmentFullName
            - Name: NODE_ENV
              Value: !Ref EnvironmentFullName
            - Name: PORT
              Value: 80
            - Name: DB_HOST
              Value: !Ref RDSInstanceEndpoint
            - Name: RAILS_SERVE_STATIC_FILES
              Value: true
          Secrets:
            - Name: SECRET_KEY_BASE
              ValueFrom: !Sub '${SecretArn}:secretKey::'
            - Name: DB_PASSWORD
              ValueFrom: !Sub '${SecretArn}:dbPassword::'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Sub /ecs/${ProjectName}-web-${Environment}
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
      Tags:
        - Key: project-name
          Value: !Ref ProjectName
        - Key: environment
          Value: !Ref Environment

  WebLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs/${ProjectName}-web-${Environment}
      RetentionInDays: 30

  WebServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ProjectName}-web-${Environment}
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: WebServiceRolePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Resource: '*'
                Action:
                  - rds:*
                  - rds-db:*
      Tags:
        - Key: project-name
          Value: !Ref ProjectName
        - Key: environment
          Value: !Ref Environment

  WebService:
    Type: AWS::ECS::Service
    DependsOn: LoadBalancerListener
    Properties:
      Cluster: !Ref ECSClusterArn
      DesiredCount: 1
      LoadBalancers:
        - TargetGroupArn: !Ref TargetGroup
          ContainerName: !Sub ${ProjectName}-web-${Environment}
          ContainerPort: 80
      CapacityProviderStrategy:
        - CapacityProvider: !Ref EC2CapacityProviderName
          Weight: 1
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !GetAtt WebSecurityGroup.GroupId
          Subnets: !Split [ ',', !Ref PrivateSubnets ]
      TaskDefinition: !Ref WebTaskDefinition
      Tags:
        - Key: project-name
          Value: !Ref ProjectName
        - Key: environment
          Value: !Ref Environment

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Protocol: HTTP
      Port: 80
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: application
      Scheme: internet-facing
      SecurityGroups:
        - !GetAtt LoadBalancerSecurityGroup.GroupId
      Subnets: !Split [ ',', !Ref PublicSubnets ]
      Tags:
        - Key: project-name
          Value: !Ref ProjectName
        - Key: environment
          Value: !Ref Environment

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      TargetType: ip
      Protocol: HTTP
      Port: 80
      VpcId: !Ref VpcId
      HealthCheckPath: /health_check
      Tags:
        - Key: project-name
          Value: !Ref ProjectName
        - Key: environment
          Value: !Ref Environment

  WebSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${ProjectName}-web-${Environment}
      GroupDescription: Security group for web app
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - SourceSecurityGroupId: !GetAtt LoadBalancerSecurityGroup.GroupId
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
      Tags:
        - Key: project-name
          Value: !Ref ProjectName
        - Key: environment
          Value: !Ref Environment

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${ProjectName}-alb-${Environment}
      GroupDescription: Security group for application load balancer
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
      Tags:
        - Key: project-name
          Value: !Ref ProjectName
        - Key: environment
          Value: !Ref Environment