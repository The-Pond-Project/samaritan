AWSTemplateFormatVersion: 2010-09-09

Parameters:
  ProjectName:
    Type: String
  Environment:
    Type: String
  RegionShortName:
    Type: String

  VpcId:
    Type: String
  PrivateSubnets:
    Type: String

Resources:
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub ${ProjectName}-${Environment}-${RegionShortName}
      CapacityProviders:
        - !Ref EC2CapacityProvider
      Tags:
        - Key: project-name
          Value: !Ref ProjectName
        - Key: environment
          Value: !Ref Environment

  ECSLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs/${ProjectName}-${Environment}-${RegionShortName}
      RetentionInDays: 30

  ECSExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ProjectName}-esc-${Environment}-${RegionShortName}
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Tags:
        - Key: project-name
          Value: !Ref ProjectName
        - Key: environment
          Value: !Ref Environment

  EC2CapacityProvider:
    Type: AWS::ECS::CapacityProvider
    Properties:
      Name: !Sub cp-${ProjectName}-${Environment}-${RegionShortName}
      AutoScalingGroupProvider:
        AutoScalingGroupArn: !Ref EC2AutoScalingGroup
        ManagedScaling:
          Status: ENABLED
        ManagedTerminationProtection: ENABLED
      Tags:
        - Key: project-name
          Value: !Ref ProjectName
        - Key: environment
          Value: !Ref Environment

  EC2AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub sg-${ProjectName}-${Environment}-${RegionShortName}
      LaunchConfigurationName: !Ref EC2LaunchConfiguration
      MinSize: 0
      MaxSize: 1
      VPCZoneIdentifier: !Split [ ',', !Ref PrivateSubnets ]
      NewInstancesProtectedFromScaleIn: true
#        DesiredCapacity: String
#        DesiredCapacityType: String
#        LaunchTemplate:
#          LaunchTemplateSpecification
#        LoadBalancerNames: ??
#          - String
#        TargetGroupARNs:
#          - String
      Tags:
        - Key: project-name
          Value: !Ref ProjectName
          PropagateAtLaunch: true
        - Key: environment
          Value: !Ref Environment
          PropagateAtLaunch: true

  EC2LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: ami-0b8da17c3b532bbcb
      SecurityGroups:
        - !Ref ECSSecurityGroup
      InstanceType: t3.small
      IamInstanceProfile: !Ref EC2InstanceProfile
#      KeyName: !Ref KeyName
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash -xe
            useradd test
            echo "test:test" | chpasswd
            echo "ECS_CLUSTER=${ProjectName}-${Environment}-${RegionShortName}" >> /etc/ecs/ecs.config
#            yum install -y aws-cfn-bootstrap
#            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource EC2AutoScalingGroup --region ${AWS::Region}

  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${ProjectName}-ecs-ec2-${Environment}-${RegionShortName}
      GroupDescription: Security group for ec2 instances in ecs cluster
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
      Tags:
        - Key: project-name
          Value: !Ref ProjectName
        - Key: environment
          Value: !Ref Environment

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref EC2Role
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - ec2.amazonaws.com
      Path: /
      Policies:
        - PolicyName: ecs-service
          PolicyDocument:
            Statement:
              - Effect: Allow
                Resource: '*'
                Action:
                  - ecs:CreateCluster
                  - ecs:DeregisterContainerInstance
                  - ecs:DiscoverPollEndpoint
                  - ecs:Poll
                  - ecs:RegisterContainerInstance
                  - ecs:StartTelemetrySession
                  - ecs:Submit*
                  - ecs:UpdateContainerInstancesState
                  - logs:CreateLogStream
                  - logs:PutLogEvents

Outputs:
  ECSClusterArn:
    Value: !GetAtt ECSCluster.Arn
  ECSExecutionRoleArn:
    Value: !GetAtt ECSExecutionRole.Arn
  EC2CapacityProviderName:
    Value: !Ref EC2CapacityProvider
