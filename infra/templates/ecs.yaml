AWSTemplateFormatVersion: 2010-09-09

Parameters:
  ProjectName:
    Type: String
  Environment:
    Type: String

  VpcId:
    Type: String
  PrivateSubnets:
    Type: String
  PrivateSubnetsCidr:
    Type: String
  SecretArn:
    Type: String
  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id'
  BucketArn:
    Type: String
  BucketName:
    Type: String
  DBVolume:
    Type: String

Conditions:
  IsProd: !Equals [!Ref Environment, 'prod']
  IsNotProd: !Not [Condition: IsProd]

Resources:
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub ${ProjectName}-${Environment}
      CapacityProviders:
        - !If
          - IsProd
          - !Ref EC2CapacityProvider
          - !Ref AWS::NoValue
      Tags:
        - Key: project-name
          Value: !Ref ProjectName
        - Key: environment
          Value: !Ref Environment

  ECSExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ProjectName}-esc-${Environment}
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: ECSExecutionRolePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Resource: '*'
                Action:
                  - secretsmanager:GetSecretValue

      Tags:
        - Key: project-name
          Value: !Ref ProjectName
        - Key: environment
          Value: !Ref Environment

  EC2CapacityProvider:
    Type: AWS::ECS::CapacityProvider
    Condition: IsProd
    Properties:
      Name: !Sub cp-${ProjectName}-${Environment}
      AutoScalingGroupProvider:
        AutoScalingGroupArn: !Ref EC2AutoScalingGroup
        ManagedScaling:
          Status: ENABLED
        ManagedTerminationProtection: ENABLED
      Tags:
        - Key: project-name
          Value: !Ref ProjectName
        - Key: environment
          Value: !Ref Environment

  EC2AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Condition: IsProd
    Properties:
      AutoScalingGroupName: !Sub sg-${ProjectName}-${Environment}
      LaunchConfigurationName: !Ref EC2LaunchConfiguration
      MinSize: 0
      MaxSize: 3
      VPCZoneIdentifier: !Split [ ',', !Ref PrivateSubnets ]
      NewInstancesProtectedFromScaleIn: true
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-ecs-${Environment}'
          PropagateAtLaunch: true
        - Key: project-name
          Value: !Ref ProjectName
          PropagateAtLaunch: true
        - Key: environment
          Value: !Ref Environment
          PropagateAtLaunch: true

  EC2LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Condition: IsProd
    Properties:
      ImageId: !Ref LatestAmiId
      SecurityGroups:
        - !Ref ECSSecurityGroup
      InstanceType: t3.small
      IamInstanceProfile: !Ref EC2InstanceProfile
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            yum update -y && yum install -y awscli jq
          
            userPass=$(aws secretsmanager get-secret-value --region ${AWS::Region} --secret-id ${ProjectName}-secret --query SecretString --output text | jq -r .defaultEC2Password)          
            useradd samaritan
            echo "samaritan:$userPass" | chpasswd

            echo "ECS_CLUSTER=${ProjectName}-${Environment}" >> /etc/ecs/ecs.config

  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${ProjectName}-ecs-${Environment}
      GroupDescription: Security group for ec2 instances in ecs cluster
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0 #todo restrict
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
        - !If
          - IsNotProd
          - CidrIp: !Ref PrivateSubnetsCidr
            IpProtocol: tcp
            FromPort: 5432
            ToPort: 5432
          - !Ref AWS::NoValue
      Tags:
        - Key: project-name
          Value: !Ref ProjectName
        - Key: environment
          Value: !Ref Environment

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EC2Role

  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - ec2.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
      Policies:
        - PolicyName: ECSExecutionRolePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Resource: !Ref SecretArn
                Action:
                  - secretsmanager:GetSecretValue
              - Effect: Allow
                Resource: !Ref BucketArn
                Action:
                  - s3:Get*
                  - s3:List*

  ESCInstance:
    Type: AWS::EC2::Instance
    DependsOn: ECSCluster
    Condition: IsNotProd
    Properties:
      ImageId: !Ref LatestAmiId
      InstanceType: t3.small
      PropagateTagsToVolumeOnCreation: true
      IamInstanceProfile: !Ref EC2InstanceProfile
      SecurityGroupIds:
        - !Ref ECSSecurityGroup
      SubnetId: !Select [ 0, !Split [ ',', !Ref PrivateSubnets ] ]
      Volumes:
        - Device: /dev/sdf
          VolumeId: !Ref DBVolume
      UserData:
        Fn::Base64:
          !Sub |
          #!/bin/bash
          yum update -y && yum install -y awscli jq
          
          userPass=$(aws secretsmanager get-secret-value --region ${AWS::Region} --secret-id ${ProjectName}-secret --query SecretString --output text | jq -r .defaultEC2Password)
          
          useradd samaritan
          echo "samaritan:$userPass" | chpasswd
          usermod -aG wheel samaritan
          
          echo "ECS_CLUSTER=${ProjectName}-${Environment}" >> /etc/ecs/ecs.config

          mkdir -p /var/lib/pgsql/14/data
          echo "UUID=14de1dc7-5149-47ae-be5b-5402ba7d1d1e  /var/lib/pgsql/14/data  xfs  defaults,nofail  0  2" >> /etc/fstab
          mount -a
          
          cat << EOF > /etc/yum.repos.d/samaritan-repo.repo
          [samaritan-repo]
          name=samaritan-repo
          baseurl=https://${BucketName}.s3.${AWS::Region}.amazonaws.com/samaritan-repo/
          gpgcheck=0
          enabled=1
          EOF

          yum update -y && yum install -y postgresql14 postgresql14-server postgresql14-libs
          chown -R postgres:postgres /var/lib/pgsql 
          systemctl enable --now postgresql-14

          su - postgres <<'EOpostgres'
          dbMasterPass=$(aws secretsmanager get-secret-value --region ${AWS::Region} --secret-id ${ProjectName}-secret --query SecretString --output text | jq -r .dbMasterPassword)
          dbPass=$(aws secretsmanager get-secret-value --region ${AWS::Region} --secret-id ${ProjectName}-secret --query SecretString --output text | jq -r .dbPassword)          
          psql -U postgres -c "alter user postgres with password '$dbMasterPass';"
          EOpostgres

      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-ecs-${Environment}'
        - Key: project-name
          Value: !Ref ProjectName
        - Key: environment
          Value: !Ref Environment

Outputs:
  ECSClusterArn:
    Value: !GetAtt ECSCluster.Arn
  ECSExecutionRoleArn:
    Value: !GetAtt ECSExecutionRole.Arn
  EC2CapacityProviderName:
    Value:
      !If
        - IsProd
        - !Ref EC2CapacityProvider
        - ''
  ECSInstancePrivateDnsName:
    Value: !GetAtt ESCInstance.PrivateDnsName