AWSTemplateFormatVersion: 2010-09-09

Parameters:
  ProjectName:
    Type: String
  Environment:
    Type: String

  VpcId:
    Type: String
  PrivateSubnets:
    Type: String
  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id'

Resources:
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub ${ProjectName}-${Environment}
      CapacityProviders:
        - !Ref EC2CapacityProvider
      Tags:
        - Key: project-name
          Value: !Ref ProjectName
        - Key: environment
          Value: !Ref Environment

  ECSExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ProjectName}-esc-${Environment}
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: ECSExecutionRolePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Resource: '*'
                Action:
                  - secretsmanager:GetSecretValue

      Tags:
        - Key: project-name
          Value: !Ref ProjectName
        - Key: environment
          Value: !Ref Environment

  EC2CapacityProvider:
    Type: AWS::ECS::CapacityProvider
    Properties:
      Name: !Sub cp-${ProjectName}-${Environment}
      AutoScalingGroupProvider:
        AutoScalingGroupArn: !Ref EC2AutoScalingGroup
        ManagedScaling:
          Status: ENABLED
        ManagedTerminationProtection: ENABLED
      Tags:
        - Key: project-name
          Value: !Ref ProjectName
        - Key: environment
          Value: !Ref Environment

  EC2AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub sg-${ProjectName}-${Environment}
      LaunchConfigurationName: !Ref EC2LaunchConfiguration
      MinSize: 0
      MaxSize: 3
      VPCZoneIdentifier: !Split [ ',', !Ref PrivateSubnets ]
      NewInstancesProtectedFromScaleIn: true
      Tags:
        - Key: project-name
          Value: !Ref ProjectName
          PropagateAtLaunch: true
        - Key: environment
          Value: !Ref Environment
          PropagateAtLaunch: true

  EC2LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref LatestAmiId
      SecurityGroups:
        - !Ref ECSSecurityGroup
      InstanceType: t3.small
      IamInstanceProfile: !Ref EC2InstanceProfile
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            yum update -y && yum install -y jq
          
            userPass=$(aws secretsmanager get-secret-value --region ${AWS::Region} --secret-id ${ProjectName}-secret --query SecretString --output text | jq -r .defaultEC2Password)          
            useradd samaritan
            echo "samaritan:$userPass" | chpasswd

            echo "ECS_CLUSTER=${ProjectName}-${Environment}" >> /etc/ecs/ecs.config
            
            amazon-linux-extras install -y postgresql14
            
            #install the Docker volume plugin
            #docker plugin install rexray/ebs REXRAY_PREEMPT=true EBS_REGION=${AWS::Region} --grant-all-permissions            

  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${ProjectName}-ecs-ec2-${Environment}
      GroupDescription: Security group for ec2 instances in ecs cluster
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0 #todo restrict
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
      Tags:
        - Key: project-name
          Value: !Ref ProjectName
        - Key: environment
          Value: !Ref Environment

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EC2Role

  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - ec2.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role

Outputs:
  ECSClusterArn:
    Value: !GetAtt ECSCluster.Arn
  ECSExecutionRoleArn:
    Value: !GetAtt ECSExecutionRole.Arn
  EC2CapacityProviderName:
    Value: !Ref EC2CapacityProvider
